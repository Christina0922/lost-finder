{"ast":null,"code":"// 백엔드 API를 통한 SMS 발송 유틸리티\n// API 키는 서버에만 저장되어 보안이 보장됩니다.\n\nexport const sendSMS = async (to, message) => {\n  try {\n    const response = await fetch(`/api/send-sms`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        phone: to,\n        message\n      })\n    });\n    const result = await response.json();\n    if (result.success) {\n      console.log(`✅ SMS 발송 성공: ${to}`);\n      return true;\n    } else {\n      console.error(`❌ SMS 발송 실패: ${result.error}`);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ SMS API 호출 실패:', error);\n    return false;\n  }\n};\nexport const sendVerificationCode = async (phone, code) => {\n  try {\n    const response = await fetch(`/api/send-verification`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        phone,\n        code\n      })\n    });\n    const result = await response.json();\n    if (result.success) {\n      console.log(`✅ 인증번호 발송 요청 성공: ${phone}`);\n      return true;\n    } else {\n      console.error(`❌ 인증번호 발송 실패: ${result.error}`);\n      return false;\n    }\n  } catch (error) {\n    console.error('❌ 인증번호 API 호출 실패:', error);\n    return false;\n  }\n};\n\n// 서버 상태 확인\nexport const checkServerHealth = async () => {\n  try {\n    // 캐시 문제를 피하기 위해 현재 시간을 쿼리 파라미터로 추가\n    const response = await fetch(`/api/health?t=${new Date().getTime()}`);\n    if (!response.ok) {\n      return false;\n    }\n    const data = await response.json();\n    return data.status === 'OK';\n  } catch (error) {\n    console.error('Server health check failed:', error);\n    return false;\n  }\n};\n\n// 설정 가이드\nexport const getSetupGuide = () => {\n  return `\n🔧 플레이스토어 등록용 완전한 SMS 시스템 설정 가이드:\n\n## 1. 백엔드 서버 설정\n1. server 폴더로 이동: cd server\n2. 환경변수 설정 (.env 파일 생성):\n   TWILIO_ACCOUNT_SID=your_account_sid_here\n   TWILIO_AUTH_TOKEN=your_auth_token_here\n   TWILIO_FROM_NUMBER=+1234567890\n3. 서버 실행: npm start\n\n## 2. 프론트엔드 설정\n1. .env 파일 생성:\n   REACT_APP_API_URL=http://localhost:5000\n2. React 앱 실행: npm start\n\n## 3. Twilio 설정\n1. Twilio 가입: https://www.twilio.com/try-twilio\n2. 무료 크레딧 받기 ($15-20)\n3. 전화번호 발급받기\n4. API 키 확인\n\n## 4. 플레이스토어 등록 준비\n- ✅ 실제 SMS 발송\n- ✅ 보안 강화 (API 키 서버 보관)\n- ✅ 사용자 인증 완료\n- ✅ 임시 비밀번호 시스템\n\n💰 비용: 무료 크레딧으로 1,000-1,500건 SMS 발송 가능\n  `;\n};","map":{"version":3,"names":["sendSMS","to","message","response","fetch","method","headers","body","JSON","stringify","phone","result","json","success","console","log","error","sendVerificationCode","code","checkServerHealth","Date","getTime","ok","data","status","getSetupGuide"],"sources":["C:/Users/My PC/Desktop/lost-finder/client/src/utils/sms.ts"],"sourcesContent":["// 백엔드 API를 통한 SMS 발송 유틸리티\r\n// API 키는 서버에만 저장되어 보안이 보장됩니다.\r\n\r\nexport const sendSMS = async (to: string, message: string): Promise<boolean> => {\r\n  try {\r\n    const response = await fetch(`/api/send-sms`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ phone: to, message })\r\n    });\r\n\r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      console.log(`✅ SMS 발송 성공: ${to}`);\r\n      return true;\r\n    } else {\r\n      console.error(`❌ SMS 발송 실패: ${result.error}`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ SMS API 호출 실패:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const sendVerificationCode = async (phone: string, code: string): Promise<boolean> => {\r\n  try {\r\n    const response = await fetch(`/api/send-verification`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ phone, code })\r\n    });\r\n\r\n    const result = await response.json();\r\n    \r\n    if (result.success) {\r\n      console.log(`✅ 인증번호 발송 요청 성공: ${phone}`);\r\n      return true;\r\n    } else {\r\n      console.error(`❌ 인증번호 발송 실패: ${result.error}`);\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.error('❌ 인증번호 API 호출 실패:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 서버 상태 확인\r\nexport const checkServerHealth = async (): Promise<boolean> => {\r\n  try {\r\n    // 캐시 문제를 피하기 위해 현재 시간을 쿼리 파라미터로 추가\r\n    const response = await fetch(`/api/health?t=${new Date().getTime()}`);\r\n    if (!response.ok) {\r\n      return false;\r\n    }\r\n    const data = await response.json();\r\n    return data.status === 'OK';\r\n  } catch (error) {\r\n    console.error('Server health check failed:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// 설정 가이드\r\nexport const getSetupGuide = () => {\r\n  return `\r\n🔧 플레이스토어 등록용 완전한 SMS 시스템 설정 가이드:\r\n\r\n## 1. 백엔드 서버 설정\r\n1. server 폴더로 이동: cd server\r\n2. 환경변수 설정 (.env 파일 생성):\r\n   TWILIO_ACCOUNT_SID=your_account_sid_here\r\n   TWILIO_AUTH_TOKEN=your_auth_token_here\r\n   TWILIO_FROM_NUMBER=+1234567890\r\n3. 서버 실행: npm start\r\n\r\n## 2. 프론트엔드 설정\r\n1. .env 파일 생성:\r\n   REACT_APP_API_URL=http://localhost:5000\r\n2. React 앱 실행: npm start\r\n\r\n## 3. Twilio 설정\r\n1. Twilio 가입: https://www.twilio.com/try-twilio\r\n2. 무료 크레딧 받기 ($15-20)\r\n3. 전화번호 발급받기\r\n4. API 키 확인\r\n\r\n## 4. 플레이스토어 등록 준비\r\n- ✅ 실제 SMS 발송\r\n- ✅ 보안 강화 (API 키 서버 보관)\r\n- ✅ 사용자 인증 완료\r\n- ✅ 임시 비밀번호 시스템\r\n\r\n💰 비용: 무료 크레딧으로 1,000-1,500건 SMS 발송 가능\r\n  `;\r\n}; "],"mappings":"AAAA;AACA;;AAEA,OAAO,MAAMA,OAAO,GAAG,MAAAA,CAAOC,EAAU,EAAEC,OAAe,KAAuB;EAC9E,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAE;MAC5CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK,EAAET,EAAE;QAAEC;MAAQ,CAAC;IAC7C,CAAC,CAAC;IAEF,MAAMS,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAEpC,IAAID,MAAM,CAACE,OAAO,EAAE;MAClBC,OAAO,CAACC,GAAG,CAAC,gBAAgBd,EAAE,EAAE,CAAC;MACjC,OAAO,IAAI;IACb,CAAC,MAAM;MACLa,OAAO,CAACE,KAAK,CAAC,gBAAgBL,MAAM,CAACK,KAAK,EAAE,CAAC;MAC7C,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,oBAAoB,GAAG,MAAAA,CAAOP,KAAa,EAAEQ,IAAY,KAAuB;EAC3F,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;MACrDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,KAAK;QAAEQ;MAAK,CAAC;IACtC,CAAC,CAAC;IAEF,MAAMP,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAEpC,IAAID,MAAM,CAACE,OAAO,EAAE;MAClBC,OAAO,CAACC,GAAG,CAAC,oBAAoBL,KAAK,EAAE,CAAC;MACxC,OAAO,IAAI;IACb,CAAC,MAAM;MACLI,OAAO,CAACE,KAAK,CAAC,iBAAiBL,MAAM,CAACK,KAAK,EAAE,CAAC;MAC9C,OAAO,KAAK;IACd;EACF,CAAC,CAAC,OAAOA,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,iBAAiB,GAAG,MAAAA,CAAA,KAA8B;EAC7D,IAAI;IACF;IACA,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,IAAIgB,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,EAAE,CAAC;IACrE,IAAI,CAAClB,QAAQ,CAACmB,EAAE,EAAE;MAChB,OAAO,KAAK;IACd;IACA,MAAMC,IAAI,GAAG,MAAMpB,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClC,OAAOW,IAAI,CAACC,MAAM,KAAK,IAAI;EAC7B,CAAC,CAAC,OAAOR,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,aAAa,GAAGA,CAAA,KAAM;EACjC,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export const resizeAndCompressImage = (file, maxSize = 800, quality = 0.7) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = event => {\n      var _event$target;\n      if (!((_event$target = event.target) !== null && _event$target !== void 0 && _event$target.result)) {\n        return reject(new Error(\"이미지를 읽을 수 없습니다.\"));\n      }\n      const img = new Image();\n      img.src = event.target.result;\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        let {\n          width,\n          height\n        } = img;\n        if (width > height) {\n          if (width > maxSize) {\n            height = Math.round(height * (maxSize / width));\n            width = maxSize;\n          }\n        } else {\n          if (height > maxSize) {\n            width = Math.round(width * (maxSize / height));\n            height = maxSize;\n          }\n        }\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        if (!ctx) {\n          return reject(new Error(\"캔버스 컨텍스트를 가져올 수 없습니다.\"));\n        }\n        ctx.drawImage(img, 0, 0, width, height);\n        const dataUrl = canvas.toDataURL('image/jpeg', quality);\n        resolve(dataUrl);\n      };\n      img.onerror = error => {\n        reject(error);\n      };\n    };\n    reader.onerror = error => {\n      reject(error);\n    };\n  });\n};","map":{"version":3,"names":["resizeAndCompressImage","file","maxSize","quality","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","event","_event$target","target","result","Error","img","Image","src","canvas","document","createElement","width","height","Math","round","ctx","getContext","drawImage","dataUrl","toDataURL","onerror","error"],"sources":["C:/Users/My PC/Desktop/lost-finder/client/src/utils/image.ts"],"sourcesContent":["export const resizeAndCompressImage = (file: File, maxSize = 800, quality = 0.7): Promise<string> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n\r\n    reader.onload = (event) => {\r\n      if (!event.target?.result) {\r\n        return reject(new Error(\"이미지를 읽을 수 없습니다.\"));\r\n      }\r\n\r\n      const img = new Image();\r\n      img.src = event.target.result as string;\r\n\r\n      img.onload = () => {\r\n        const canvas = document.createElement('canvas');\r\n        let { width, height } = img;\r\n\r\n        if (width > height) {\r\n          if (width > maxSize) {\r\n            height = Math.round(height * (maxSize / width));\r\n            width = maxSize;\r\n          }\r\n        } else {\r\n          if (height > maxSize) {\r\n            width = Math.round(width * (maxSize / height));\r\n            height = maxSize;\r\n          }\r\n        }\r\n\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        if (!ctx) {\r\n          return reject(new Error(\"캔버스 컨텍스트를 가져올 수 없습니다.\"));\r\n        }\r\n\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n        const dataUrl = canvas.toDataURL('image/jpeg', quality);\r\n        resolve(dataUrl);\r\n      };\r\n\r\n      img.onerror = (error) => {\r\n        reject(error);\r\n      };\r\n    };\r\n\r\n    reader.onerror = (error) => {\r\n      reject(error);\r\n    };\r\n  });\r\n}; "],"mappings":"AAAA,OAAO,MAAMA,sBAAsB,GAAGA,CAACC,IAAU,EAAEC,OAAO,GAAG,GAAG,EAAEC,OAAO,GAAG,GAAG,KAAsB;EACnG,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACR,IAAI,CAAC;IAE1BM,MAAM,CAACG,MAAM,GAAIC,KAAK,IAAK;MAAA,IAAAC,aAAA;MACzB,IAAI,GAAAA,aAAA,GAACD,KAAK,CAACE,MAAM,cAAAD,aAAA,eAAZA,aAAA,CAAcE,MAAM,GAAE;QACzB,OAAOR,MAAM,CAAC,IAAIS,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAC7C;MAEA,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,GAAG,GAAGP,KAAK,CAACE,MAAM,CAACC,MAAgB;MAEvCE,GAAG,CAACN,MAAM,GAAG,MAAM;QACjB,MAAMS,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/C,IAAI;UAAEC,KAAK;UAAEC;QAAO,CAAC,GAAGP,GAAG;QAE3B,IAAIM,KAAK,GAAGC,MAAM,EAAE;UAClB,IAAID,KAAK,GAAGpB,OAAO,EAAE;YACnBqB,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACF,MAAM,IAAIrB,OAAO,GAAGoB,KAAK,CAAC,CAAC;YAC/CA,KAAK,GAAGpB,OAAO;UACjB;QACF,CAAC,MAAM;UACL,IAAIqB,MAAM,GAAGrB,OAAO,EAAE;YACpBoB,KAAK,GAAGE,IAAI,CAACC,KAAK,CAACH,KAAK,IAAIpB,OAAO,GAAGqB,MAAM,CAAC,CAAC;YAC9CA,MAAM,GAAGrB,OAAO;UAClB;QACF;QAEAiB,MAAM,CAACG,KAAK,GAAGA,KAAK;QACpBH,MAAM,CAACI,MAAM,GAAGA,MAAM;QACtB,MAAMG,GAAG,GAAGP,MAAM,CAACQ,UAAU,CAAC,IAAI,CAAC;QAEnC,IAAI,CAACD,GAAG,EAAE;UACR,OAAOpB,MAAM,CAAC,IAAIS,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACnD;QAEAW,GAAG,CAACE,SAAS,CAACZ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEM,KAAK,EAAEC,MAAM,CAAC;QACvC,MAAMM,OAAO,GAAGV,MAAM,CAACW,SAAS,CAAC,YAAY,EAAE3B,OAAO,CAAC;QACvDE,OAAO,CAACwB,OAAO,CAAC;MAClB,CAAC;MAEDb,GAAG,CAACe,OAAO,GAAIC,KAAK,IAAK;QACvB1B,MAAM,CAAC0B,KAAK,CAAC;MACf,CAAC;IACH,CAAC;IAEDzB,MAAM,CAACwB,OAAO,GAAIC,KAAK,IAAK;MAC1B1B,MAAM,CAAC0B,KAAK,CAAC;IACf,CAAC;EACH,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}